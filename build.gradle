/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = '11'
targetCompatibility = '11'

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    compile "ch.qos.logback:logback-classic:1.2.3"

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "$projectDir/build/classes"

    doFirst {
        file(new File(projectDir, "/build/classes")).mkdirs()
    }
}

clean.doLast {
    // clean-up directory when necessary
    file(new File(projectDir, "/build")).deleteDir()
}

sourceSets {
    generated {
        java {
            srcDir "$projectDir/build/classes"
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your endencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

task runJava(type: JavaExec) {
    main = 'Main'
 
    classpath = sourceSets.main.runtimeClasspath
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}